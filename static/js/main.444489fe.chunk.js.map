{"version":3,"sources":["serviceWorker.js","constants/ActionTypes.js","reducers/subRecuders.js","reducers/rootReducer.js","components/Square.js","components/Board.js","actions/allActions.js","container/boardContainer.js","components/Controls.js","container/controlContainer.js","components/SideBar.js","container/sideBarContainer.js","helper.js","index.js","middleWare.js"],"names":["Boolean","window","location","hostname","match","SQUARES","TURN","CHANGE","SET","WINNER_LINE","ADD","REMOVE","HISTORY","initialState","Array","fill","rootReducer","combineReducers","squares","state","action","type","types","newState","slice","index","value","turn","dirMark","arr","isRemove","forEach","element","TYPE","winnerLine","dir","isSorted","history","newArr","push","Square","props","status","ok","onClick","className","src","alt","str1","str2","Board","row","i","square","j","key","includes","setTurn","RemoveWinner","connect","dispatch","addToBoard","Controls","restart","sorted","SideBar","style","maxHeight","overflow","paddingBottom","reverse","indexHis","map","item","postion","Math","floor","index2","length","id","disabled","listTurn","from","to","RemoveHis","countDirection","width","height","count","block","mark","check","x","y","countByTrend","trend","haveWinner","myWidth","Number","myHeight","result","store","createStore","rootReducers","applyMiddleware","next","getState","change","changeBoardFromHis","ChangeHisIndex","a","paddingTop","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.444489fe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SQUARES = {\r\n  ADD: 'Add',\r\n  REMOVE: 'Remove',\r\n  MANY: 'dfghj',\r\n  RESET: 'resset'\r\n};\r\nexport const TURN = {\r\n  CHANGE: 'Change',\r\n  SET: 'set'\r\n};\r\nexport const WINNER_LINE = {\r\n  ADD: 'have winner',\r\n  REMOVE: ' NR'\r\n};\r\nexport const HISTORY = {\r\n  ADD: '=sfsr',\r\n  REMOVE: ' sfgs',\r\n  RESET: 'fdgh',\r\n  CHANGE_INDEX: 'dfghjfghfddgh'\r\n};\r\nexport const SORT = 'dfg';\r\n","import * as types from '../constants/ActionTypes';\r\n\r\nconst initialState = Array(400).fill(null);\r\n\r\nexport const turn = (state = false, action) => {\r\n  const TYPE = types.TURN;\r\n  switch (action.type) {\r\n    case TYPE.CHANGE: {\r\n      return !state;\r\n    }\r\n    case TYPE.SET: {\r\n      return action.turn;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const winnerLine = (state = { arr: [], dir: -1 }, action) => {\r\n  const TYPE = types.WINNER_LINE;\r\n  switch (action.type) {\r\n    case TYPE.ADD: {\r\n      return action.arr;\r\n    }\r\n    case TYPE.REMOVE:\r\n      return { arr: [], dir: -1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const squares = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SQUARES.ADD: {\r\n      const newState = state.slice();\r\n      newState[action.index] = {\r\n        value: action.turn ? 'X' : 'O',\r\n        dirMark: -1\r\n      };\r\n      return newState;\r\n    }\r\n    case types.SQUARES.REMOVE: {\r\n      const newState = state.slice();\r\n      newState[action.index] = null;\r\n      return newState;\r\n    }\r\n    case types.SQUARES.MANY: {\r\n      const { arr, isRemove } = action;\r\n      const newState = state.slice();\r\n      arr.forEach(element => {\r\n        if (isRemove) newState[element.index] = null;\r\n        else\r\n          newState[element.index] = {\r\n            value: element.turn ? 'X' : 'O',\r\n            dirMark: -1\r\n          };\r\n      });\r\n      return newState;\r\n    }\r\n    case types.SQUARES.RESET: {\r\n      return Array(400).fill(null);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const isSorted = (state = false, action) => {\r\n  switch (action.type) {\r\n    case types.SORT: {\r\n      return !state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const history = (state = { arr: [], index: -1 }, action) => {\r\n  const { arr, index } = state;\r\n  switch (action.type) {\r\n    case types.HISTORY.ADD: {\r\n      const newArr = arr.slice(0, index + 1);\r\n      newArr.push({ index: action.index, turn: action.turn });\r\n      return {\r\n        arr: newArr,\r\n        index: index + 1\r\n      };\r\n    }\r\n    case types.HISTORY.CHANGE_INDEX: {\r\n      return {\r\n        arr,\r\n        index: action.index\r\n      };\r\n    }\r\n    case types.HISTORY.RESET: {\r\n      return { arr: [], index: -1 };\r\n    }\r\n    case types.HISTORY.REMOVE:\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { squares, turn, winnerLine, isSorted, history } from './subRecuders';\r\n\r\nconst rootReducer = combineReducers({\r\n  squares,\r\n  turn,\r\n  winnerLine,\r\n  isSorted,\r\n  history\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\n\r\nconst Square = props => {\r\n  const { status, dir, ok, value, onClick } = props;\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={`square  ${status}`}\r\n      onClick={() => onClick()}\r\n    >\r\n      {(() => {\r\n        if (value === null) return <img src=\"./Anh1.png\" alt=\"dgf\" />;\r\n        if (value.value === 'O') {\r\n          if (ok === true) {\r\n            const str1 = `./Anh2.${dir + 1}.png`;\r\n            return <img src={str1} alt=\"sfg\" />;\r\n          }\r\n          return <img src=\"./Anh2.png\" alt=\"sfg\" />;\r\n        }\r\n        if (ok === true) {\r\n          const str2 = `./Anh3.${dir + 1}.png`;\r\n          return <img src={str2} alt=\"sfg\" />;\r\n        }\r\n        return <img src=\"./Anh3.png\" alt=\"sfg\" />;\r\n      })()}\r\n    </button>\r\n  );\r\n};\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst Board = props => {\r\n  const { onClick, squares, turn, winnerLine } = props;\r\n  const row = [];\r\n  for (let i = 0; i < 20; i += 1) {\r\n    const square = [];\r\n    for (let j = 0; j < 20; j += 1) {\r\n      const index = i * 20 + j;\r\n      square.push(\r\n        <Square\r\n          key={j}\r\n          value={squares[index]}\r\n          dir={winnerLine.dir}\r\n          ok={winnerLine.arr.includes(index)}\r\n          onClick={() => {\r\n            onClick(index, turn);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    row.push(\r\n      <div key={i} className=\"board-row\">\r\n        {square}\r\n      </div>\r\n    );\r\n  }\r\n  return <div>{row}</div>;\r\n};\r\nexport default Board;\r\n","import * as types from '../constants/ActionTypes';\r\n\r\nexport const addToBoard = (index, turn) => ({\r\n  type: types.SQUARES.ADD,\r\n  index,\r\n  turn\r\n});\r\nexport const removeFromBoard = index => ({\r\n  type: types.SQUARES.REMOVE,\r\n  index\r\n});\r\nexport const reStart = () => ({\r\n  type: types.SQUARES.RESET\r\n});\r\nexport const changeBoardFromHis = (arr, isRemove) => ({\r\n  type: types.SQUARES.MANY,\r\n  arr,\r\n  isRemove\r\n});\r\nexport const changeTurn = () => ({\r\n  type: types.TURN.CHANGE\r\n});\r\nexport const setTurn = turn => ({\r\n  type: types.TURN.SET,\r\n  turn\r\n});\r\nexport const winner = arr => ({\r\n  type: types.WINNER_LINE.ADD,\r\n  arr\r\n});\r\nexport const RemoveWinner = () => ({\r\n  type: types.WINNER_LINE.REMOVE\r\n});\r\nexport const addToHis = (index, turn) => ({\r\n  type: types.HISTORY.ADD,\r\n  index,\r\n  turn\r\n});\r\nexport const RemoveHis = (from, to) => ({\r\n  type: types.HISTORY.REMOVE,\r\n  from,\r\n  to\r\n});\r\nexport const ReSetHis = () => ({\r\n  type: types.HISTORY.RESET\r\n});\r\nexport const ChangeHisIndex = index => ({\r\n  type: types.HISTORY.CHANGE_INDEX,\r\n  index\r\n});\r\nexport const sort = () => ({\r\n  type: types.SORT\r\n});\r\n","import { connect } from 'react-redux';\r\n\r\nimport Board from '../components/Board';\r\nimport { addToBoard } from '../actions/allActions';\r\n\r\nconst mapStateToProps = state => ({\r\n  squares: state.squares,\r\n  turn: state.turn,\r\n  winnerLine: state.winnerLine\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onClick: (index, turn) => dispatch(addToBoard(index, turn))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Board);\r\n","import React from 'react';\r\n\r\nconst Controls = props => {\r\n  const { isSorted, turn, restart, sorted } = props;\r\n  return (\r\n    <div>\r\n      <p>{turn ? 'NEXT TURN :X' : 'NEXT TURN :O'}</p>\r\n      <button type=\"button\" className=\"button\" onClick={() => restart()}>\r\n        RESTART\r\n      </button>\r\n      <button type=\"button\" className=\"button\" onClick={() => sorted()}>\r\n        {isSorted ? 'SORTED' : 'SORT'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default Controls;\r\n","import { connect } from 'react-redux';\r\nimport Controls from '../components/Controls';\r\nimport {\r\n  reStart,\r\n  setTurn,\r\n  sort,\r\n  ReSetHis,\r\n  RemoveWinner\r\n} from '../actions/allActions';\r\n\r\nconst mapStateToProps = state => ({\r\n  isSorted: state.isSorted,\r\n  turn: state.turn\r\n});\r\nconst restart = dispatch => {\r\n  dispatch(reStart());\r\n  dispatch(setTurn(false));\r\n  dispatch(RemoveWinner());\r\n  dispatch(ReSetHis());\r\n};\r\nconst mapDispatchToProps = dispatch => ({\r\n  restart: () => restart(dispatch),\r\n  sorted: () => dispatch(sort())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Controls);\r\n","import React from 'react';\r\n\r\nconst SideBar = props => {\r\n  const listTurn = () => {\r\n    const { history, onClick, isSorted } = props;\r\n    const arr = !isSorted ? history.arr.slice().reverse() : history.arr.slice();\r\n    const indexHis = history.index;\r\n    return arr.map((item, index) => {\r\n      const postion = `( ${item.index % 20} , ${Math.floor(\r\n        item.index / 20\r\n      )} ) `;\r\n      const index2 = !isSorted ? arr.length - 1 - index : index;\r\n      const id = index;\r\n      if (index2 === indexHis) {\r\n        return (\r\n          <button\r\n            type=\"button\"\r\n            disabled\r\n            className=\"myButton\"\r\n            key={id}\r\n            onClick={() => onClick(indexHis, index2)}\r\n          >\r\n            {index2} TURN {`${item.turn ? 'X' : 'O'} ${postion}`}\r\n          </button>\r\n        );\r\n      }\r\n      return (\r\n        <button\r\n          type=\"button\"\r\n          className=\"myButton\"\r\n          key={id}\r\n          onClick={() => onClick(indexHis, index2)}\r\n        >\r\n          {index2} TURN {`${item.turn ? 'X' : 'O'}  ${postion}`}\r\n        </button>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div style={{ maxHeight: 450, overflow: 'auto', paddingBottom: 20 }}>\r\n      {listTurn()}\r\n    </div>\r\n  );\r\n};\r\nexport default SideBar;\r\n","import { connect } from 'react-redux';\r\n\r\nimport SideBar from '../components/SideBar';\r\nimport { RemoveHis } from '../actions/allActions';\r\n\r\nconst mapStateToProps = state => ({\r\n  history: state.history,\r\n  turn: state.turn,\r\n  winnerLine: state.winnerLine,\r\n  isSorted: state.isSorted\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onClick: (from, to) => dispatch(RemoveHis(from, to))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SideBar);\r\n","function countDirection(dir, i, square, width, height) {\r\n  let count = 0;\r\n  const turn = square[i].value;\r\n  let block = 0;\r\n  const mark = [];\r\n  const check = (x, y) => x >= 0 && x < width && (y >= 0 && y < height);\r\n  const countByTrend = trend => {\r\n    let x = i % width;\r\n    let y = Math.floor(i / width);\r\n    let index = i;\r\n    while (\r\n      check(x, y) &&\r\n      square[index] != null &&\r\n      square[index].value === turn\r\n    ) {\r\n      count += 1;\r\n      mark.push(index);\r\n      x += dir[trend][0];\r\n      y += dir[trend][1];\r\n      index = y * width + x;\r\n    }\r\n    if (check(x, y) && square[index] != null && square[index].value !== turn) {\r\n      block += 1;\r\n    }\r\n  };\r\n  countByTrend(0); //  up trend\r\n  countByTrend(1); //  down trend\r\n  count -= 1;\r\n  if (count === 5 && block === 2) return false;\r\n  if (count < 5) return false;\r\n  return mark;\r\n}\r\nfunction haveWinner(square, i, width = 20, height = 20) {\r\n  const myWidth = Number(width);\r\n  const myHeight = Number(height);\r\n  const dir = [\r\n    [[-1, -1], [1, 1]],\r\n    [[0, -1], [0, +1]],\r\n    [[1, -1], [-1, 1]],\r\n    [[-1, 0], [1, 0]]\r\n  ];\r\n  for (let j = 0; j < 4; j += 1) {\r\n    const result = countDirection(dir[j], i, square, myWidth, myHeight);\r\n    if (result !== false)\r\n      // have a winner\r\n      return {\r\n        arr: result,\r\n        dir: j\r\n      };\r\n  }\r\n  return false;\r\n}\r\nexport default haveWinner;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducers from './reducers/rootReducer';\nimport Board from './container/boardContainer';\nimport Controls from './container/controlContainer';\nimport SideBar from './container/sideBarContainer';\nimport mid from './middleWare';\n\nconst store = createStore(rootReducers, applyMiddleware(mid));\nconst a = (\n  <Provider store={store}>\n    <div className=\"flex-container\">\n      <Board />\n      <div style={{ paddingTop: 10, width: 500 }}>\n        <Controls />\n        <SideBar />\n      </div>\n    </div>\n  </Provider>\n);\n\nReactDOM.render(a, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as types from './constants/ActionTypes';\r\nimport {\r\n  changeTurn,\r\n  winner,\r\n  addToHis,\r\n  changeBoardFromHis,\r\n  setTurn,\r\n  ChangeHisIndex,\r\n  RemoveWinner\r\n} from './actions/allActions';\r\nimport haveWinner from './helper';\r\n\r\nexport default store => next => action => {\r\n  if (action.type === types.SQUARES.ADD) {\r\n    const { squares, winnerLine } = store.getState();\r\n    if (squares[action.index] === null && winnerLine.dir === -1) {\r\n      store.dispatch(changeTurn());\r\n      squares[action.index] = { value: action.turn ? 'X' : 'O', dirMark: -1 };\r\n      const result = haveWinner(squares, action.index);\r\n      if (result !== false) {\r\n        store.dispatch(winner(result));\r\n      }\r\n      store.dispatch(addToHis(action.index, action.turn));\r\n      next(action);\r\n    }\r\n  } else if (action.type === types.HISTORY.REMOVE) {\r\n    const { from, to } = action;\r\n    let { history } = store.getState();\r\n\r\n    const change =\r\n      from > to\r\n        ? {\r\n            arr: history.arr.slice(to + 1, from + 1),\r\n            isRemove: true\r\n          }\r\n        : {\r\n            arr: history.arr.slice(from, to + 1),\r\n            isRemove: false\r\n          };\r\n    store.dispatch(changeBoardFromHis(change.arr, change.isRemove));\r\n    store.dispatch(ChangeHisIndex(to));\r\n    history = store.getState().history;\r\n    store.dispatch(setTurn(!history.arr[to].turn));\r\n    store.dispatch(RemoveWinner());\r\n    next(action);\r\n  } else {\r\n    next(action);\r\n  }\r\n};\r\n"],"sourceRoot":""}